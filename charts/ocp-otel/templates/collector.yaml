apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ include "ocp-otel.fullname" . }}-logging
spec:
  managementState: managed
  mode: daemonset
  config:
    # OUTPUTS
    exporters:
    {{- if .Values.collector.outputs.debug.enabled }}
      debug:
        verbosity: {{ .Values.collector.outputs.debug.verbosity }}
    {{- end }}
    {{- range $tenant := (list "application" "infrastructure" "audit") }}
    ## {{ upper $tenant }}
    {{- if $.Values.collector.outputs.s3.enabled }}
      awss3/{{ $tenant }}:
        s3uploader:
          region: "{{ $.Values.collector.outputs.s3.region }}"
          s3_bucket: "{{ $.Values.collector.outputs.s3.bucket }}"
          s3_prefix: "{{ $.Values.collector.outputs.s3.prefix }}/{{ $tenant }}"
          compression: "gzip"
        marshaler: otlp_json
        {{- if and ($.Values.collector.outputs.s3.application_logs_by_namespace) (eq $tenant "application")}}
        resource_attrs_to_s3:
          s3_prefix: "kubernetes.namespace_name"
        {{- end }}
    {{- end }}
    {{- if $.Values.collector.outputs.lokistack.enabled}}
      otlphttp/lokistack-{{ $tenant }}:
        endpoint: https://logging-loki-gateway-http.openshift-logging.svc.cluster.local:8080/api/logs/v1/{{ $tenant }}/otlp
        encoding: json
        tls:
          ca_file: "/var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt"
        auth:
          authenticator: bearertokenauth
    {{- end }}
    {{- end }}
  # INPUTS
    receivers:
      {{- if .Values.collector.inputs.fluentforward.enabled }}
      # FluentForward
      fluentforward:
        endpoint: "0.0.0.0:8006"
      {{- end }}
      {{- if .Values.collector.inputs.otlp.enabled }}
      ## OTLP
      otlp:
        protocols:
          grpc:
            endpoint: "0.0.0.0:4317"
          http:
            endpoint: "0.0.0.0:4318"
      {{- end }}

      {{- if .Values.collector.inputs.infrastructure.enabled }}
      ## infrastructure logs
      filelog/infrastructure:
        attributes:
            log.type: "infrastructure"
        include:
        - /var/log/pods/openshift-*/*/*.log
        - /var/log/pods/kube-system/*/*.log
        - /var/log/pods/kube-system*/*/*.log
        start_at: end
        include_file_name: false
        include_file_path: true
        operators:
        - id: container-parser
          type: container
          retry_on_failure:
            enabled: true
          storage: file_storage
      journald:
        files: /var/log/journal/*/*
        priority: info
        units:
          - kubelet
          - crio
          - init.scope
          - dnsmasq
        all: true
        retry_on_failure:
          enabled: true
          initial_interval: 1s
          max_interval: 30s
          max_elapsed_time: 5m
      ## Application logs
      {{- end }}
      {{- if .Values.collector.inputs.application.enabled }}
      filelog/application:
        attributes:
          log.type: "application"
        include:
        - /var/log/pods/*/*/*.log
        exclude:
        - /var/log/pods/openshift-*/*/*.log
        - /var/log/pods/kube-system/*/*.log
        - /var/log/pods/kube-system*/*/*.log
        start_at: end
        include_file_name: false
        include_file_path: true
        operators:
        - id: container-parser
          type: container
          retry_on_failure:
            enabled: true
          storage: file_storage
      {{- end }}
      {{- if .Values.collector.inputs.audit.enabled }}
      ## audit logs (need to add kube events?)
      filelog/audit:
        attributes:
          log.type: "audit"
        include:
        - /var/log/openshift-apiserver/audit*.log
        start_at: end
        include_file_name: false
        include_file_path: true
        operators:
        - id: container-parser
          type: container
          retry_on_failure:
            enabled: true
          storage: file_storage
      {{- end }}

    service:
      extensions:
      - file_storage
      - bearertokenauth
      # PIPELINES
      pipelines:
        {{- range $pipeline := .Values.collector.pipelines }}
        logs/{{ lower $pipeline.name }}:
          receivers: # inputs
          {{- if has $pipeline.inputRef (list "application" "infrastructure" "audit") }}
            - filelog/{{ $pipeline.inputRef }}
          {{- else }}
            - {{ $pipeline.inputRef }}
          {{- end }}
          processors: # filters
            - batch
            - resourcedetection/openshift
            - k8sattributes
            - transform
            - resource
          exporters: # outputs
          {{- range $output := $pipeline.outputRefs }}
          {{- if eq $output "debug" }}
            - debug
          {{- else if eq $output "lokistack" }}
            - otlphttp/lokistack-{{ $pipeline.inputRef }}
          {{- else if eq $output "s3" }}
            - awss3/{{ $pipeline.inputRef }}
          {{- end }}
          {{- end }}
        {{- end }}
    processors:
      batch:
        send_batch_max_size: 1500
        send_batch_size: 1000
        timeout: 1s
      # enrich logs with cluster details
      resourcedetection/openshift:
        detectors: [env,openshift]
        timeout: 2s
        override: false
      k8sattributes:
        auth_type: "serviceAccount"
      resource:
        attributes:
          - key:  kubernetes.namespace_name
            from_attribute: k8s.namespace.name
            action: upsert
          - key:  kubernetes.pod_name
            from_attribute: k8s.pod.name
            action: upsert
          - key: kubernetes.container_name
            from_attribute: k8s.container.name
            action: upsert
          - key: log_type
            value: application
            action: upsert
      transform:
        log_statements:
          - context: log
            statements:
              - set(attributes["level"], ConvertCase(severity_text, "lower"))
    extensions:
      file_storage:
        directory: /var/lib/otelcol
      bearertokenauth:
        filename: "/var/run/secrets/kubernetes.io/serviceaccount/token"

  imagePullPolicy: IfNotPresent
  {{ if .Values.collector.image }}
  image: "{{ .Values.collector.image }}"
  {{ end }}
  upgradeStrategy: automatic
  terminationGracePeriodSeconds: 30
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 250Mi
  targetAllocator:
    enabled: false
  {{- if or .Values.collector.inputs.application.enabled .Values.collector.inputs.infrastructure.enabled  }}
  volumeMounts:
  - name: varlogpods
    mountPath: /var/log/pods
    readOnly: true
  {{- end }}
  {{- if .Values.collector.inputs.audit.enabled }}
  - name: auditlog
    mountPath: /var/log/openshift-apiserver
    readOnly: true
  {{- end }}
  - name: varlibotelcol
    mountPath: /var/lib/otelcol
  {{- if .Values.collector.inputs.infrastructure.enabled }}
  - name: journal-logs
    mountPath: /var/log/journal/
    readOnly: true
  {{- end }}

  {{- if .Values.collector.extra_envs }}
  {{ .Values.collector.extra_envs | toYaml | nindent 2 }}
  {{ end }}
  volumes:
  {{- if or .Values.collector.inputs.application.enabled .Values.collector.inputs.infrastructure.enabled  }}
  - name: varlogpods
    hostPath:
      path: /var/log/pods
  {{- end }}
  {{- if has "audit" .Values.collector.tenants }}
  - name: auditlog
    hostPath:
      path: /var/log/openshift-apiserver
  {{- end }}
  - name: varlibotelcol
    hostPath:
      path: /var/lib/otelcol
      type: DirectoryOrCreate
  {{- if .Values.collector.inputs.infrastructure.enabled }}
  - name: journal-logs
    hostPath:
      path: /var/log/journal
  {{- end }}
  env:
  - name: KUBERNETES_SERVICE_HOST
    value: "kubernetes.default.svc.cluster.local"
  - name: KUBERNETES_SERVICE_PORT
    value: "443"
  - name: OTEL_K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  - name: OTEL_K8S_NODE_IP
    valueFrom:
      fieldRef:
        fieldPath: status.hostIP
  - name: OTEL_K8S_NAMESPACE
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.namespace
  - name: OTEL_K8S_POD_NAME
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: metadata.name
  - name: OTEL_K8S_POD_IP
    valueFrom:
      fieldRef:
        apiVersion: v1
        fieldPath: status.podIP
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - FSETID
      - KILL
      - NET_BIND_SERVICE
      - SETGID
      - SETPCAP
      - SETUID
    readOnlyRootFilesystem: true
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
    seLinuxOptions:
      type: spc_t
    seccompProfile:
      type: RuntimeDefault
  tolerations:
    - key: node-role.kubernetes.io/master
      operator: Exists
      effect: NoSchedule
    - effect: NoSchedule
      key: node-role.kubernetes.io/infra
      value: reserved
    - effect: NoExecute
      key: node-role.kubernetes.io/infra
      value: reserved